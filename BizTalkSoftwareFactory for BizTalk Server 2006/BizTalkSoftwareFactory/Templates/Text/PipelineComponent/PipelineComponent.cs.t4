<#@ template language="C#" #>
<#@ assembly name="System.dll" #>
<#@ Assembly Name="BizTalkSoftwareFactory.dll" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="BizTalkSoftwareFactory.BusinessEntities" #>
<#@ property processor="PropertyProcessor" name="BizTalkNamespace" #>
<#@ property processor="PropertyProcessor" name="PipelineComponentsProjectSuffix" #>
<#@ property processor="PropertyProcessor" name="ComponentGuid" #>
<#@ property processor="PropertyProcessor" name="ClassName" #>
<#@ property processor="PropertyProcessor" name="ComponentType" #>
<#@ property processor="PropertyProcessor" name="ImplementIProbeMessage" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ property processor="PropertyProcessor" name="DesignPropertyList" #>

using System;
using System.IO;
using System.Text;
using System.Drawing;
using System.Resources;
using System.Reflection;
using System.Diagnostics;
using System.Collections;
using System.ComponentModel;
using Microsoft.BizTalk.Message.Interop;
using Microsoft.BizTalk.Component.Interop;
using Microsoft.BizTalk.Component;
using Microsoft.BizTalk.Messaging;
using Microsoft.BizTalk.Component.Utilities;

/*
 * This sample was generated with the Pipeline Component Wizard by Martijn Hoogendoorn 
 * The SchemaList part was taken from the blog from Kader Yildirim (http://www.techheadbrothers.com/Articles.aspx/decouverte-biztalk-server-2006-1-3-page-4)
*/
namespace <#=BizTalkNamespace #>.<#= PipelineComponentsProjectSuffix #>
{
    [ComponentCategory(CategoryTypes.CATID_PipelineComponent)]
    [System.Runtime.InteropServices.Guid("<#= ComponentGuid #>")]
    [ComponentCategory(CategoryTypes.CATID_<#= ComponentType #>)]
    public class <#= ClassName #> : Microsoft.BizTalk.Component.Interop.IComponent, IBaseComponent, IPersistPropertyBag, IComponentUI
    {
        private System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager("<#=BizTalkNamespace #>.<#= PipelineComponentsProjectSuffix #>.<#= ClassName #>", Assembly.GetExecutingAssembly());

<#  
	bool containsSchemaList = false;
	foreach (DesignPropertyItem item in DesignPropertyList) { 
		if(item.PropertyType == "SchemaList")
		{ 
			containsSchemaList = true;
#>
        private Microsoft.BizTalk.Component.Utilities.SchemaList _<#= item.PropertyName #> = new Microsoft.BizTalk.Component.Utilities.SchemaList();
        
        public Microsoft.BizTalk.Component.Utilities.SchemaList <#= item.PropertyName #>
        {
            get
            {
                return _<#= item.PropertyName #>;
            }
   			set
			{
				_TestSchemaList = value;
			}
        }       
<#		
		}
		else if(item.PropertyType == "SchemaWithNone")
		{ 
#>
        private Microsoft.BizTalk.Component.Utilities.SchemaWithNone _<#= item.PropertyName #> = new Microsoft.BizTalk.Component.Utilities.SchemaWithNone("");
        
        public Microsoft.BizTalk.Component.Utilities.SchemaWithNone <#= item.PropertyName #>
        {
            get
            {
                return _<#= item.PropertyName #>;
            }
            set
            {
                _<#= item.PropertyName #> = value;
            }
        }
		
<#
		}
		else
		{
#>
        
        private <#= item.PropertyType #> _<#= item.PropertyName #>;
        
        public string <#= item.PropertyName #>
        {
            get
            {
                return _<#= item.PropertyName #>;
            }
            set
            {
                _<#= item.PropertyName #> = value;
            }
        }

<#		}
	}
 #>
        
 <# if(containsSchemaList) { #>
        #region SchemaList methods 
			public string ConvertFromSchema(Schema s)
			{
			  using (MemoryStream ms = new MemoryStream())
			  {
				System.Runtime.Serialization.Formatters.Binary.BinaryFormatter f = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
				f.Serialize(ms, s);
				return Convert.ToBase64String(ms.ToArray());
			  }
			}

			public Schema ConvertToSchema(string s)
			{
			  using (MemoryStream ms = new MemoryStream(Convert.FromBase64String(s)))
			  {
				System.Runtime.Serialization.Formatters.Binary.BinaryFormatter f = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
				return (Schema)f.Deserialize(ms);
			  }
			}

			public string ConvertFromSchemaList(SchemaList sl)
			{
			  StringBuilder sb = new StringBuilder();
			  int len = sl.Count;
			  for (int i = 0; i < len; ++i)
			  {
				sb.Append(this.ConvertFromSchema(sl[i]));
				if ((i + 1) != len) sb.Append("|");
			  }
			  return sb.ToString();
			}

			public SchemaList ConvertToSchemaList(string s)
			{
			  SchemaList sl = new SchemaList();
			  string[] schemaList = s.Split(new char[] { '|' });
			  foreach (string schema in schemaList)
			  {
				sl.Add(this.ConvertToSchema(schema));
			  }
			  return sl;
			}

        #endregion
<# } #> 

        #region IBaseComponent members
        /// <summary>
        /// Name of the component
        /// </summary>
        [Browsable(false)]
        public string Name
        {
            get
            {
                return resourceManager.GetString("COMPONENTNAME", System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        
        /// <summary>
        /// Version of the component
        /// </summary>
        [Browsable(false)]
        public string Version
        {
            get
            {
                return resourceManager.GetString("COMPONENTVERSION", System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        
        /// <summary>
        /// Description of the component
        /// </summary>
        [Browsable(false)]
        public string Description
        {
            get
            {
                return resourceManager.GetString("COMPONENTDESCRIPTION", System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        #endregion
        
        #region IPersistPropertyBag members
        /// <summary>
        /// Gets class ID of component for usage from unmanaged code.
        /// </summary>
        /// <param name="classid">
        /// Class ID of the component
        /// </param>
        public void GetClassID(out System.Guid classid)
        {
            classid = new System.Guid("<#= ComponentGuid #>");
        }
        
        /// <summary>
        /// not implemented
        /// </summary>
        public void InitNew()
        {
        }
        
        /// <summary>
        /// Loads configuration properties for the component
        /// </summary>
        /// <param name="pb">Configuration property bag</param>
        /// <param name="errlog">Error status</param>
        public virtual void Load(Microsoft.BizTalk.Component.Interop.IPropertyBag pb, int errlog)
        {
            object val = null;
<#  foreach (DesignPropertyItem item in DesignPropertyList) 
	{ #>
            val = this.ReadPropertyBag(pb, "<#= item.PropertyName #>");
            if (val != null)
            {
<# 
		if(item.PropertyType == "SchemaList")
		{ 
#>
	            this._<#= item.PropertyName #> = this.ConvertToSchemaList(val.ToString());
<#		}
		else if(item.PropertyType == "SchemaWithNone")
		{
#>
	            this._<#= item.PropertyName #> = new Microsoft.BizTalk.Component.Utilities.SchemaWithNone(((string)(val)));
<#
		}
		else
		{
#>
		        this._<#= item.PropertyName #> = ((<#= item.PropertyType #>)(val));
<#		} #>
			}
<#
	} 
#>
        }
        
        /// <summary>
        /// Saves the current component configuration into the property bag
        /// </summary>
        /// <param name="pb">Configuration property bag</param>
        /// <param name="fClearDirty">not used</param>
        /// <param name="fSaveAllProperties">not used</param>
        public virtual void Save(Microsoft.BizTalk.Component.Interop.IPropertyBag pb, bool fClearDirty, bool fSaveAllProperties)
        {
<#  foreach (DesignPropertyItem item in DesignPropertyList) 
	{ 
		if(item.PropertyType == "SchemaList")
		{
#>
			this.WritePropertyBag(pb, "<#= item.PropertyName #>", this.ConvertFromSchemaList(<#= item.PropertyName #>));
<#		
		}
		else if(item.PropertyType == "SchemaWithNone")
		{
#>
            this.WritePropertyBag(pb, "<#= item.PropertyName #>", this.<#= item.PropertyName #>.SchemaName);
<#
		}
		else
		{
#>            this.WritePropertyBag(pb, "<#= item.PropertyName #>", this.<#= item.PropertyName #>);

<# }} #>
        }
        
        #region utility functionality
        /// <summary>
        /// Reads property value from property bag
        /// </summary>
        /// <param name="pb">Property bag</param>
        /// <param name="propName">Name of property</param>
        /// <returns>Value of the property</returns>
        private object ReadPropertyBag(Microsoft.BizTalk.Component.Interop.IPropertyBag pb, string propName)
        {
            object val = null;
            try
            {
                pb.Read(propName, out val, 0);
            }
            catch (System.ArgumentException )
            {
                return val;
            }
            catch (System.Exception e)
            {
                throw new System.ApplicationException(e.Message);
            }
            return val;
        }
        
        /// <summary>
        /// Writes property values into a property bag.
        /// </summary>
        /// <param name="pb">Property bag.</param>
        /// <param name="propName">Name of property.</param>
        /// <param name="val">Value of property.</param>
        private void WritePropertyBag(Microsoft.BizTalk.Component.Interop.IPropertyBag pb, string propName, object val)
        {
            try
            {
                pb.Write(propName, ref val);
            }
            catch (System.Exception e)
            {
                throw new System.ApplicationException(e.Message);
            }
        }
        #endregion
        #endregion
        
        #region IComponentUI members
        /// <summary>
        /// Component icon to use in BizTalk Editor
        /// </summary>
        [Browsable(false)]
        public IntPtr Icon
        {
            get
            {
                return ((System.Drawing.Bitmap)(this.resourceManager.GetObject("COMPONENTICON", System.Globalization.CultureInfo.InvariantCulture))).GetHicon();
            }
        }
        
        /// <summary>
        /// The Validate method is called by the BizTalk Editor during the build 
        /// of a BizTalk project.
        /// </summary>
        /// <param name="obj">An Object containing the configuration properties.</param>
        /// <returns>The IEnumerator enables the caller to enumerate through a collection of strings containing error messages. These error messages appear as compiler error messages. To report successful property validation, the method should return an empty enumerator.</returns>
        public System.Collections.IEnumerator Validate(object obj)
        {
            // example implementation:
            // ArrayList errorList = new ArrayList();
            // errorList.Add("This is a compiler error");
            // return errorList.GetEnumerator();
            return null;
        }
        #endregion

<# if(ImplementIProbeMessage) { #>
        #region IProbeMessage members
        /// <summary>
        /// Called by the messaging engine when a new message arrives
        /// Checks if the incoming message is in a recognizable format
        /// If the message is in a recognizable format, only this component
        /// within this stage will be execute (FirstMatch equals true)
        /// </summary>
        /// <param name="pc">Pipeline context</param>
        /// <param name="inmsg">the actual message</param>
        public bool Probe(Microsoft.BizTalk.Component.Interop.IPipelineContext pc, Microsoft.BizTalk.Message.Interop.IBaseMessage inmsg)
        {
            // 
            // TODO: check whether you're interested in the given message
            // 
            return true;
        }
        #endregion
<# } #>
        #region IComponent members
        /// <summary>
        /// Implements IComponent.Execute method.
        /// </summary>
        /// <param name="pc">Pipeline context</param>
        /// <param name="inmsg">Input message</param>
        /// <returns>Original input message</returns>
        /// <remarks>
        /// IComponent.Execute method is used to initiate
        /// the processing of the message in this pipeline component.
        /// </remarks>
        public Microsoft.BizTalk.Message.Interop.IBaseMessage Execute(Microsoft.BizTalk.Component.Interop.IPipelineContext pc, Microsoft.BizTalk.Message.Interop.IBaseMessage inmsg)
        {
            // 
            // TODO: implement component logic
            // 
            // this way, it's a passthrough pipeline component
            return inmsg;
        }
        #endregion
    }
}
