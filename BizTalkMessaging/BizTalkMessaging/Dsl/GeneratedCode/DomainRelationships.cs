//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainRelationship BizTalkMessagingModelHasApplications
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModelHasApplications.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModelHasApplications.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8546cb57-1d7c-4054-988f-523bb89a0ae0")]
	public partial class BizTalkMessagingModelHasApplications : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BizTalkMessagingModelHasApplications domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8546cb57, 0x1d7c, 0x4054, 0x98, 0x8f, 0x52, 0x3b, 0xb8, 0x9a, 0x0a, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BizTalkMessagingModelHasApplications link in the same Partition as the given BizTalkMessagingModel
		/// </summary>
		/// <param name="source">BizTalkMessagingModel to use as the source of the relationship.</param>
		/// <param name="target">Application to use as the target of the relationship.</param>
		public BizTalkMessagingModelHasApplications(BizTalkMessagingModel source, Application target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BizTalkMessagingModelHasApplications.BizTalkMessagingModelDomainRoleId, source), new DslModeling::RoleAssignment(BizTalkMessagingModelHasApplications.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BizTalkMessagingModelHasApplications(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BizTalkMessagingModelHasApplications(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BizTalkMessagingModelHasApplications(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BizTalkMessagingModelHasApplications(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BizTalkMessagingModel domain role code
		
		/// <summary>
		/// BizTalkMessagingModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BizTalkMessagingModelDomainRoleId = new global::System.Guid(0x00cc3acf, 0x20d4, 0x4b2b, 0xaf, 0x1b, 0xbf, 0x11, 0x09, 0xe0, 0x38, 0x59);
		
		/// <summary>
		/// DomainRole BizTalkMessagingModel
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModelHasApplications/BizTalkMessagingModel.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModelHasApplications/BizTalkMessagingModel.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Applications", PropertyDisplayNameKey="BizTalkMessaging.BizTalkMessagingModelHasApplications/BizTalkMessagingModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("00cc3acf-20d4-4b2b-af1b-bf1109e03859")]
		public virtual BizTalkMessagingModel BizTalkMessagingModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BizTalkMessagingModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BizTalkMessagingModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BizTalkMessagingModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BizTalkMessagingModel of a Application
		/// <summary>
		/// Gets BizTalkMessagingModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BizTalkMessagingModel GetBizTalkMessagingModel(Application element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as BizTalkMessagingModel;
		}
		
		/// <summary>
		/// Sets BizTalkMessagingModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBizTalkMessagingModel(Application element, BizTalkMessagingModel newBizTalkMessagingModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newBizTalkMessagingModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xabdd80f8, 0xe853, 0x49cf, 0x8d, 0xc5, 0x0f, 0x87, 0x4e, 0xfd, 0x5b, 0xac);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModelHasApplications/Element.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModelHasApplications/Element.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BizTalkMessagingModel", PropertyDisplayNameKey="BizTalkMessaging.BizTalkMessagingModelHasApplications/Element.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("abdd80f8-e853-49cf-8dc5-0f874efd5bac")]
		public virtual Application Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Application)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Applications of a BizTalkMessagingModel
		/// <summary>
		/// Gets a list of Applications.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Application> GetApplications(BizTalkMessagingModel element)
		{
			return new DslModeling::LinkedElementCollection<Application>(element, BizTalkMessagingModelDomainRoleId);
		}
		#endregion
		#region BizTalkMessagingModel link accessor
		/// <summary>
		/// Get the list of BizTalkMessagingModelHasApplications links to a BizTalkMessagingModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BizTalkMessagingModelHasApplications> GetLinksToApplications ( global::BizTalkMessaging.BizTalkMessagingModel bizTalkMessagingModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasApplications>(bizTalkMessagingModelInstance, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.BizTalkMessagingModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the BizTalkMessagingModelHasApplications link to a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BizTalkMessagingModelHasApplications GetLinkToBizTalkMessagingModel (global::BizTalkMessaging.Application elementInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasApplications>(elementInstance, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BizTalkMessagingModelHasApplications instance accessors
		
		/// <summary>
		/// Get any BizTalkMessagingModelHasApplications links between a given BizTalkMessagingModel and a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BizTalkMessagingModelHasApplications> GetLinks( global::BizTalkMessaging.BizTalkMessagingModel source, global::BizTalkMessaging.Application target )
		{
			global::System.Collections.Generic.List<global::BizTalkMessaging.BizTalkMessagingModelHasApplications> outLinks = new global::System.Collections.Generic.List<global::BizTalkMessaging.BizTalkMessagingModelHasApplications>();
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasApplications>(source, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.BizTalkMessagingModelDomainRoleId);
			foreach ( global::BizTalkMessaging.BizTalkMessagingModelHasApplications link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BizTalkMessagingModelHasApplications link between a given BizTalkMessagingModeland a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BizTalkMessagingModelHasApplications GetLink( global::BizTalkMessaging.BizTalkMessagingModel source, global::BizTalkMessaging.Application target )
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasApplications>(source, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.BizTalkMessagingModelDomainRoleId);
			foreach ( global::BizTalkMessaging.BizTalkMessagingModelHasApplications link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainRelationship BizTalkMessagingModelHasBroker
	/// Description for BizTalkMessaging.BizTalkMessagingModelHasBroker
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModelHasBroker.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModelHasBroker.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("da28b31a-5326-472e-a895-a8cc35b200cc")]
	public partial class BizTalkMessagingModelHasBroker : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BizTalkMessagingModelHasBroker domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda28b31a, 0x5326, 0x472e, 0xa8, 0x95, 0xa8, 0xcc, 0x35, 0xb2, 0x00, 0xcc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BizTalkMessagingModelHasBroker link in the same Partition as the given BizTalkMessagingModel
		/// </summary>
		/// <param name="source">BizTalkMessagingModel to use as the source of the relationship.</param>
		/// <param name="target">Broker to use as the target of the relationship.</param>
		public BizTalkMessagingModelHasBroker(BizTalkMessagingModel source, Broker target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId, source), new DslModeling::RoleAssignment(BizTalkMessagingModelHasBroker.BrokerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BizTalkMessagingModelHasBroker(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BizTalkMessagingModelHasBroker(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BizTalkMessagingModelHasBroker(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BizTalkMessagingModelHasBroker(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BizTalkMessagingModel domain role code
		
		/// <summary>
		/// BizTalkMessagingModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid BizTalkMessagingModelDomainRoleId = new global::System.Guid(0xb0a74542, 0x1d40, 0x45de, 0x82, 0x18, 0x29, 0x30, 0xea, 0xe7, 0x83, 0xa7);
		
		/// <summary>
		/// DomainRole BizTalkMessagingModel
		/// Description for
		/// BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModel
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModelHasBroker/BizTalkMessagingModel.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModelHasBroker/BizTalkMessagingModel.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Broker", PropertyDisplayNameKey="BizTalkMessaging.BizTalkMessagingModelHasBroker/BizTalkMessagingModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b0a74542-1d40-45de-8218-2930eae783a7")]
		public virtual BizTalkMessagingModel BizTalkMessagingModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BizTalkMessagingModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, BizTalkMessagingModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BizTalkMessagingModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BizTalkMessagingModel of a Broker
		/// <summary>
		/// Gets BizTalkMessagingModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static BizTalkMessagingModel GetBizTalkMessagingModel(Broker element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BrokerDomainRoleId) as BizTalkMessagingModel;
		}
		
		/// <summary>
		/// Sets BizTalkMessagingModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBizTalkMessagingModel(Broker element, BizTalkMessagingModel newBizTalkMessagingModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BrokerDomainRoleId, newBizTalkMessagingModel);
		}
		#endregion
		#region Broker domain role code
		
		/// <summary>
		/// Broker domain role Id.
		/// </summary>
		public static readonly global::System.Guid BrokerDomainRoleId = new global::System.Guid(0xc0bfa2c6, 0x1199, 0x4fb6, 0x85, 0x85, 0x02, 0x18, 0xa6, 0x73, 0x90, 0x14);
		
		/// <summary>
		/// DomainRole Broker
		/// Description for BizTalkMessaging.BizTalkMessagingModelHasBroker.Broker
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModelHasBroker/Broker.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModelHasBroker/Broker.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BizTalkMessagingModel", PropertyDisplayNameKey="BizTalkMessaging.BizTalkMessagingModelHasBroker/Broker.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c0bfa2c6-1199-4fb6-8585-0218a6739014")]
		public virtual Broker Broker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Broker)DslModeling::DomainRoleInfo.GetRolePlayer(this, BrokerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BrokerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Broker of a BizTalkMessagingModel
		/// <summary>
		/// Gets Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Broker GetBroker(BizTalkMessagingModel element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, BizTalkMessagingModelDomainRoleId) as Broker;
		}
		
		/// <summary>
		/// Sets Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBroker(BizTalkMessagingModel element, Broker newBroker)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, BizTalkMessagingModelDomainRoleId, newBroker);
		}
		#endregion
		#region BizTalkMessagingModel link accessor
		/// <summary>
		/// Get the BizTalkMessagingModelHasBroker link to a BizTalkMessagingModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BizTalkMessagingModelHasBroker GetLinkToBroker (global::BizTalkMessaging.BizTalkMessagingModel bizTalkMessagingModelInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasBroker> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasBroker>(bizTalkMessagingModelInstance, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of BizTalkMessagingModel not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Broker link accessor
		/// <summary>
		/// Get the BizTalkMessagingModelHasBroker link to a Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BizTalkMessagingModelHasBroker GetLinkToBizTalkMessagingModel (global::BizTalkMessaging.Broker brokerInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasBroker> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasBroker>(brokerInstance, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BrokerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Broker not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BizTalkMessagingModelHasBroker instance accessors
		
		/// <summary>
		/// Get any BizTalkMessagingModelHasBroker links between a given BizTalkMessagingModel and a Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BizTalkMessagingModelHasBroker> GetLinks( global::BizTalkMessaging.BizTalkMessagingModel source, global::BizTalkMessaging.Broker target )
		{
			global::System.Collections.Generic.List<global::BizTalkMessaging.BizTalkMessagingModelHasBroker> outLinks = new global::System.Collections.Generic.List<global::BizTalkMessaging.BizTalkMessagingModelHasBroker>();
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasBroker> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasBroker>(source, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId);
			foreach ( global::BizTalkMessaging.BizTalkMessagingModelHasBroker link in links )
			{
				if ( target.Equals(link.Broker) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BizTalkMessagingModelHasBroker link between a given BizTalkMessagingModeland a Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BizTalkMessagingModelHasBroker GetLink( global::BizTalkMessaging.BizTalkMessagingModel source, global::BizTalkMessaging.Broker target )
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BizTalkMessagingModelHasBroker> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BizTalkMessagingModelHasBroker>(source, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId);
			foreach ( global::BizTalkMessaging.BizTalkMessagingModelHasBroker link in links )
			{
				if ( target.Equals(link.Broker) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainRelationship BrokerHasOutPorts
	/// Description for BizTalkMessaging.BrokerHasOutPorts
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.BrokerHasOutPorts.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.BrokerHasOutPorts.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("237c052b-ae8c-49be-b688-136b723eafe7")]
	public partial class BrokerHasOutPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BrokerHasOutPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x237c052b, 0xae8c, 0x49be, 0xb6, 0x88, 0x13, 0x6b, 0x72, 0x3e, 0xaf, 0xe7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BrokerHasOutPorts link in the same Partition as the given Broker
		/// </summary>
		/// <param name="source">Broker to use as the source of the relationship.</param>
		/// <param name="target">OutPort to use as the target of the relationship.</param>
		public BrokerHasOutPorts(Broker source, OutPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BrokerHasOutPorts.BrokerDomainRoleId, source), new DslModeling::RoleAssignment(BrokerHasOutPorts.OutPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BrokerHasOutPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BrokerHasOutPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BrokerHasOutPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BrokerHasOutPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Broker domain role code
		
		/// <summary>
		/// Broker domain role Id.
		/// </summary>
		public static readonly global::System.Guid BrokerDomainRoleId = new global::System.Guid(0xcd293d25, 0xd2e3, 0x4a21, 0x83, 0x92, 0xe8, 0x9e, 0xf7, 0x8c, 0x27, 0xe7);
		
		/// <summary>
		/// DomainRole Broker
		/// Description for BizTalkMessaging.BrokerHasOutPorts.Broker
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BrokerHasOutPorts/Broker.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BrokerHasOutPorts/Broker.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OutPorts", PropertyDisplayNameKey="BizTalkMessaging.BrokerHasOutPorts/Broker.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cd293d25-d2e3-4a21-8392-e89ef78c27e7")]
		public virtual Broker Broker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Broker)DslModeling::DomainRoleInfo.GetRolePlayer(this, BrokerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BrokerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Broker of a OutPort
		/// <summary>
		/// Gets Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Broker GetBroker(OutPort element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OutPortDomainRoleId) as Broker;
		}
		
		/// <summary>
		/// Sets Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBroker(OutPort element, Broker newBroker)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OutPortDomainRoleId, newBroker);
		}
		#endregion
		#region OutPort domain role code
		
		/// <summary>
		/// OutPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutPortDomainRoleId = new global::System.Guid(0xee6cf026, 0xd0a9, 0x4074, 0x9d, 0xce, 0x94, 0xc7, 0x65, 0x8b, 0xc5, 0xae);
		
		/// <summary>
		/// DomainRole OutPort
		/// Description for BizTalkMessaging.BrokerHasOutPorts.OutPort
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BrokerHasOutPorts/OutPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BrokerHasOutPorts/OutPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Broker", PropertyDisplayNameKey="BizTalkMessaging.BrokerHasOutPorts/OutPort.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ee6cf026-d0a9-4074-9dce-94c7658bc5ae")]
		public virtual OutPort OutPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutPorts of a Broker
		/// <summary>
		/// Gets a list of OutPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutPort> GetOutPorts(Broker element)
		{
			return new DslModeling::LinkedElementCollection<OutPort>(element, BrokerDomainRoleId);
		}
		#endregion
		#region Broker link accessor
		/// <summary>
		/// Get the list of BrokerHasOutPorts links to a Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BrokerHasOutPorts> GetLinksToOutPorts ( global::BizTalkMessaging.Broker brokerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasOutPorts>(brokerInstance, global::BizTalkMessaging.BrokerHasOutPorts.BrokerDomainRoleId);
		}
		#endregion
		#region OutPort link accessor
		/// <summary>
		/// Get the BrokerHasOutPorts link to a OutPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BrokerHasOutPorts GetLinkToBroker (global::BizTalkMessaging.OutPort outPortInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BrokerHasOutPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasOutPorts>(outPortInstance, global::BizTalkMessaging.BrokerHasOutPorts.OutPortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OutPort not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BrokerHasOutPorts instance accessors
		
		/// <summary>
		/// Get any BrokerHasOutPorts links between a given Broker and a OutPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BrokerHasOutPorts> GetLinks( global::BizTalkMessaging.Broker source, global::BizTalkMessaging.OutPort target )
		{
			global::System.Collections.Generic.List<global::BizTalkMessaging.BrokerHasOutPorts> outLinks = new global::System.Collections.Generic.List<global::BizTalkMessaging.BrokerHasOutPorts>();
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BrokerHasOutPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasOutPorts>(source, global::BizTalkMessaging.BrokerHasOutPorts.BrokerDomainRoleId);
			foreach ( global::BizTalkMessaging.BrokerHasOutPorts link in links )
			{
				if ( target.Equals(link.OutPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BrokerHasOutPorts link between a given Brokerand a OutPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BrokerHasOutPorts GetLink( global::BizTalkMessaging.Broker source, global::BizTalkMessaging.OutPort target )
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BrokerHasOutPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasOutPorts>(source, global::BizTalkMessaging.BrokerHasOutPorts.BrokerDomainRoleId);
			foreach ( global::BizTalkMessaging.BrokerHasOutPorts link in links )
			{
				if ( target.Equals(link.OutPort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainRelationship BrokerHasInPorts
	/// Description for BizTalkMessaging.BrokerHasInPorts
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.BrokerHasInPorts.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.BrokerHasInPorts.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c262802d-4e7a-4ac9-a8d4-0ba309f81e52")]
	public partial class BrokerHasInPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BrokerHasInPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc262802d, 0x4e7a, 0x4ac9, 0xa8, 0xd4, 0x0b, 0xa3, 0x09, 0xf8, 0x1e, 0x52);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BrokerHasInPorts link in the same Partition as the given Broker
		/// </summary>
		/// <param name="source">Broker to use as the source of the relationship.</param>
		/// <param name="target">InPort to use as the target of the relationship.</param>
		public BrokerHasInPorts(Broker source, InPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BrokerHasInPorts.BrokerDomainRoleId, source), new DslModeling::RoleAssignment(BrokerHasInPorts.InPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BrokerHasInPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BrokerHasInPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BrokerHasInPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BrokerHasInPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Broker domain role code
		
		/// <summary>
		/// Broker domain role Id.
		/// </summary>
		public static readonly global::System.Guid BrokerDomainRoleId = new global::System.Guid(0xeb575488, 0x03d6, 0x4085, 0x8d, 0xf7, 0xa8, 0xca, 0x8e, 0x82, 0xeb, 0x47);
		
		/// <summary>
		/// DomainRole Broker
		/// Description for BizTalkMessaging.BrokerHasInPorts.Broker
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BrokerHasInPorts/Broker.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BrokerHasInPorts/Broker.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InPorts", PropertyDisplayNameKey="BizTalkMessaging.BrokerHasInPorts/Broker.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eb575488-03d6-4085-8df7-a8ca8e82eb47")]
		public virtual Broker Broker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Broker)DslModeling::DomainRoleInfo.GetRolePlayer(this, BrokerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BrokerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Broker of a InPort
		/// <summary>
		/// Gets Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Broker GetBroker(InPort element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InPortDomainRoleId) as Broker;
		}
		
		/// <summary>
		/// Sets Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBroker(InPort element, Broker newBroker)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InPortDomainRoleId, newBroker);
		}
		#endregion
		#region InPort domain role code
		
		/// <summary>
		/// InPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid InPortDomainRoleId = new global::System.Guid(0xba751a07, 0x5d37, 0x4daa, 0xa3, 0xd0, 0xa2, 0xdf, 0x6d, 0x6a, 0x99, 0x03);
		
		/// <summary>
		/// DomainRole InPort
		/// Description for BizTalkMessaging.BrokerHasInPorts.InPort
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.BrokerHasInPorts/InPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.BrokerHasInPorts/InPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Broker", PropertyDisplayNameKey="BizTalkMessaging.BrokerHasInPorts/InPort.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ba751a07-5d37-4daa-a3d0-a2df6d6a9903")]
		public virtual InPort InPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, InPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InPorts of a Broker
		/// <summary>
		/// Gets a list of InPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InPort> GetInPorts(Broker element)
		{
			return new DslModeling::LinkedElementCollection<InPort>(element, BrokerDomainRoleId);
		}
		#endregion
		#region Broker link accessor
		/// <summary>
		/// Get the list of BrokerHasInPorts links to a Broker.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BrokerHasInPorts> GetLinksToInPorts ( global::BizTalkMessaging.Broker brokerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasInPorts>(brokerInstance, global::BizTalkMessaging.BrokerHasInPorts.BrokerDomainRoleId);
		}
		#endregion
		#region InPort link accessor
		/// <summary>
		/// Get the BrokerHasInPorts link to a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BrokerHasInPorts GetLinkToBroker (global::BizTalkMessaging.InPort inPortInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BrokerHasInPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasInPorts>(inPortInstance, global::BizTalkMessaging.BrokerHasInPorts.InPortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InPort not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region BrokerHasInPorts instance accessors
		
		/// <summary>
		/// Get any BrokerHasInPorts links between a given Broker and a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.BrokerHasInPorts> GetLinks( global::BizTalkMessaging.Broker source, global::BizTalkMessaging.InPort target )
		{
			global::System.Collections.Generic.List<global::BizTalkMessaging.BrokerHasInPorts> outLinks = new global::System.Collections.Generic.List<global::BizTalkMessaging.BrokerHasInPorts>();
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BrokerHasInPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasInPorts>(source, global::BizTalkMessaging.BrokerHasInPorts.BrokerDomainRoleId);
			foreach ( global::BizTalkMessaging.BrokerHasInPorts link in links )
			{
				if ( target.Equals(link.InPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one BrokerHasInPorts link between a given Brokerand a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.BrokerHasInPorts GetLink( global::BizTalkMessaging.Broker source, global::BizTalkMessaging.InPort target )
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.BrokerHasInPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.BrokerHasInPorts>(source, global::BizTalkMessaging.BrokerHasInPorts.BrokerDomainRoleId);
			foreach ( global::BizTalkMessaging.BrokerHasInPorts link in links )
			{
				if ( target.Equals(link.InPort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainRelationship ApplicationSendsToInPort
	/// Description for BizTalkMessaging.ApplicationSendsToInPort
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.ApplicationSendsToInPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.ApplicationSendsToInPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("64fd4b60-ba48-48e8-a50d-1a748680102e")]
	public partial class ApplicationSendsToInPort : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ApplicationSendsToInPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x64fd4b60, 0xba48, 0x48e8, 0xa5, 0x0d, 0x1a, 0x74, 0x86, 0x80, 0x10, 0x2e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ApplicationSendsToInPort link in the same Partition as the given Application
		/// </summary>
		/// <param name="source">Application to use as the source of the relationship.</param>
		/// <param name="target">InPort to use as the target of the relationship.</param>
		public ApplicationSendsToInPort(Application source, InPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ApplicationSendsToInPort.ApplicationDomainRoleId, source), new DslModeling::RoleAssignment(ApplicationSendsToInPort.InPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApplicationSendsToInPort(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApplicationSendsToInPort(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ApplicationSendsToInPort(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ApplicationSendsToInPort(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Application domain role code
		
		/// <summary>
		/// Application domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApplicationDomainRoleId = new global::System.Guid(0x8b2b64c8, 0xb2f7, 0x4d0d, 0x99, 0x1e, 0x67, 0xfc, 0x5e, 0x60, 0x2d, 0xd8);
		
		/// <summary>
		/// DomainRole Application
		/// Description for BizTalkMessaging.ApplicationSendsToInPort.Application
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.ApplicationSendsToInPort/Application.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.ApplicationSendsToInPort/Application.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InPort", PropertyDisplayNameKey="BizTalkMessaging.ApplicationSendsToInPort/Application.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8b2b64c8-b2f7-4d0d-991e-67fc5e602dd8")]
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Application)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApplicationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApplicationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Application of a InPort
		/// <summary>
		/// Gets Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Application GetApplication(InPort element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InPortDomainRoleId) as Application;
		}
		
		/// <summary>
		/// Sets Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetApplication(InPort element, Application newApplication)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InPortDomainRoleId, newApplication);
		}
		#endregion
		#region InPort domain role code
		
		/// <summary>
		/// InPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid InPortDomainRoleId = new global::System.Guid(0xcc71bb38, 0x3dcf, 0x42fe, 0x93, 0x7b, 0x1b, 0x43, 0x73, 0x0b, 0x1f, 0x85);
		
		/// <summary>
		/// DomainRole InPort
		/// Description for BizTalkMessaging.ApplicationSendsToInPort.InPort
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.ApplicationSendsToInPort/InPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.ApplicationSendsToInPort/InPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Application", PropertyDisplayNameKey="BizTalkMessaging.ApplicationSendsToInPort/InPort.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cc71bb38-3dcf-42fe-937b-1b43730b1f85")]
		public virtual InPort InPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, InPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InPort of a Application
		/// <summary>
		/// Gets InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InPort GetInPort(Application element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ApplicationDomainRoleId) as InPort;
		}
		
		/// <summary>
		/// Sets InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInPort(Application element, InPort newInPort)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ApplicationDomainRoleId, newInPort);
		}
		#endregion
		#region Application link accessor
		/// <summary>
		/// Get the ApplicationSendsToInPort link to a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.ApplicationSendsToInPort GetLinkToInPort (global::BizTalkMessaging.Application applicationInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.ApplicationSendsToInPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.ApplicationSendsToInPort>(applicationInstance, global::BizTalkMessaging.ApplicationSendsToInPort.ApplicationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Application not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InPort link accessor
		/// <summary>
		/// Get the ApplicationSendsToInPort link to a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.ApplicationSendsToInPort GetLinkToApplication (global::BizTalkMessaging.InPort inPortInstance)
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.ApplicationSendsToInPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.ApplicationSendsToInPort>(inPortInstance, global::BizTalkMessaging.ApplicationSendsToInPort.InPortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InPort not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ApplicationSendsToInPort instance accessors
		
		/// <summary>
		/// Get any ApplicationSendsToInPort links between a given Application and a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.ApplicationSendsToInPort> GetLinks( global::BizTalkMessaging.Application source, global::BizTalkMessaging.InPort target )
		{
			global::System.Collections.Generic.List<global::BizTalkMessaging.ApplicationSendsToInPort> outLinks = new global::System.Collections.Generic.List<global::BizTalkMessaging.ApplicationSendsToInPort>();
			global::System.Collections.Generic.IList<global::BizTalkMessaging.ApplicationSendsToInPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.ApplicationSendsToInPort>(source, global::BizTalkMessaging.ApplicationSendsToInPort.ApplicationDomainRoleId);
			foreach ( global::BizTalkMessaging.ApplicationSendsToInPort link in links )
			{
				if ( target.Equals(link.InPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ApplicationSendsToInPort link between a given Applicationand a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.ApplicationSendsToInPort GetLink( global::BizTalkMessaging.Application source, global::BizTalkMessaging.InPort target )
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.ApplicationSendsToInPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.ApplicationSendsToInPort>(source, global::BizTalkMessaging.ApplicationSendsToInPort.ApplicationDomainRoleId);
			foreach ( global::BizTalkMessaging.ApplicationSendsToInPort link in links )
			{
				if ( target.Equals(link.InPort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainRelationship OutPortSendsToApplication
	/// Description for BizTalkMessaging.OutPortSendsToApplication
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.OutPortSendsToApplication.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.OutPortSendsToApplication.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a46621df-0465-4def-bdc3-49a8cd936a9a")]
	public partial class OutPortSendsToApplication : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OutPortSendsToApplication domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa46621df, 0x0465, 0x4def, 0xbd, 0xc3, 0x49, 0xa8, 0xcd, 0x93, 0x6a, 0x9a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OutPortSendsToApplication link in the same Partition as the given OutPort
		/// </summary>
		/// <param name="source">OutPort to use as the source of the relationship.</param>
		/// <param name="target">Application to use as the target of the relationship.</param>
		public OutPortSendsToApplication(OutPort source, Application target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OutPortSendsToApplication.OutPortDomainRoleId, source), new DslModeling::RoleAssignment(OutPortSendsToApplication.ApplicationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OutPortSendsToApplication(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OutPortSendsToApplication(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OutPortSendsToApplication(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OutPortSendsToApplication(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OutPort domain role code
		
		/// <summary>
		/// OutPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid OutPortDomainRoleId = new global::System.Guid(0xea29f1e7, 0x0027, 0x4295, 0x81, 0xad, 0x03, 0x47, 0xa7, 0xb5, 0x61, 0x46);
		
		/// <summary>
		/// DomainRole OutPort
		/// Description for BizTalkMessaging.OutPortSendsToApplication.OutPort
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.OutPortSendsToApplication/OutPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.OutPortSendsToApplication/OutPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Applications", PropertyDisplayNameKey="BizTalkMessaging.OutPortSendsToApplication/OutPort.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("ea29f1e7-0027-4295-81ad-0347a7b56146")]
		public virtual OutPort OutPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, OutPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OutPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OutPorts of a Application
		/// <summary>
		/// Gets a list of OutPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutPort> GetOutPorts(Application element)
		{
			return new DslModeling::LinkedElementCollection<OutPort>(element, ApplicationDomainRoleId);
		}
		#endregion
		#region Application domain role code
		
		/// <summary>
		/// Application domain role Id.
		/// </summary>
		public static readonly global::System.Guid ApplicationDomainRoleId = new global::System.Guid(0x23d9d657, 0xd719, 0x4ed3, 0xae, 0x7a, 0x91, 0x96, 0xa5, 0xbd, 0x4f, 0x24);
		
		/// <summary>
		/// DomainRole Application
		/// Description for BizTalkMessaging.OutPortSendsToApplication.Application
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.OutPortSendsToApplication/Application.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.OutPortSendsToApplication/Application.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OutPorts", PropertyDisplayNameKey="BizTalkMessaging.OutPortSendsToApplication/Application.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("23d9d657-d719-4ed3-ae7a-9196a5bd4f24")]
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Application)DslModeling::DomainRoleInfo.GetRolePlayer(this, ApplicationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ApplicationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Applications of a OutPort
		/// <summary>
		/// Gets a list of Applications.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Application> GetApplications(OutPort element)
		{
			return new DslModeling::LinkedElementCollection<Application>(element, OutPortDomainRoleId);
		}
		#endregion
		#region OutPort link accessor
		/// <summary>
		/// Get the list of OutPortSendsToApplication links to a OutPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.OutPortSendsToApplication> GetLinksToApplications ( global::BizTalkMessaging.OutPort outPortInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.OutPortSendsToApplication>(outPortInstance, global::BizTalkMessaging.OutPortSendsToApplication.OutPortDomainRoleId);
		}
		#endregion
		#region Application link accessor
		/// <summary>
		/// Get the list of OutPortSendsToApplication links to a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.OutPortSendsToApplication> GetLinksToOutPorts ( global::BizTalkMessaging.Application applicationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.OutPortSendsToApplication>(applicationInstance, global::BizTalkMessaging.OutPortSendsToApplication.ApplicationDomainRoleId);
		}
		#endregion
		#region OutPortSendsToApplication instance accessors
		
		/// <summary>
		/// Get any OutPortSendsToApplication links between a given OutPort and a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::BizTalkMessaging.OutPortSendsToApplication> GetLinks( global::BizTalkMessaging.OutPort source, global::BizTalkMessaging.Application target )
		{
			global::System.Collections.Generic.List<global::BizTalkMessaging.OutPortSendsToApplication> outLinks = new global::System.Collections.Generic.List<global::BizTalkMessaging.OutPortSendsToApplication>();
			global::System.Collections.Generic.IList<global::BizTalkMessaging.OutPortSendsToApplication> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.OutPortSendsToApplication>(source, global::BizTalkMessaging.OutPortSendsToApplication.OutPortDomainRoleId);
			foreach ( global::BizTalkMessaging.OutPortSendsToApplication link in links )
			{
				if ( target.Equals(link.Application) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OutPortSendsToApplication link between a given OutPortand a Application.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::BizTalkMessaging.OutPortSendsToApplication GetLink( global::BizTalkMessaging.OutPort source, global::BizTalkMessaging.Application target )
		{
			global::System.Collections.Generic.IList<global::BizTalkMessaging.OutPortSendsToApplication> links = DslModeling::DomainRoleInfo.GetElementLinks<global::BizTalkMessaging.OutPortSendsToApplication>(source, global::BizTalkMessaging.OutPortSendsToApplication.OutPortDomainRoleId);
			foreach ( global::BizTalkMessaging.OutPortSendsToApplication link in links )
			{
				if ( target.Equals(link.Application) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
