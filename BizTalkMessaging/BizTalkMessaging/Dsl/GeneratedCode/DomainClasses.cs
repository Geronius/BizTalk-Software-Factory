//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainClass BizTalkMessagingModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.BizTalkMessagingModel.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.BizTalkMessagingModel.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5a57abbb-ca01-4fe0-84c8-6e594bc3314a")]
	public partial class BizTalkMessagingModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BizTalkMessagingModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a57abbb, 0xca01, 0x4fe0, 0x84, 0xc8, 0x6e, 0x59, 0x4b, 0xc3, 0x31, 0x4a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BizTalkMessagingModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BizTalkMessagingModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Applications opposite domain role accessor
		/// <summary>
		/// Gets a list of Applications.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Application> Applications
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Application>(this, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.BizTalkMessagingModelDomainRoleId);
			}
		}
		#endregion
		#region Broker opposite domain role accessor
		/// <summary>
		/// Gets or sets Broker.
		/// Description for
		/// BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModel
		/// </summary>
		public virtual Broker Broker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId) as Broker;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::BizTalkMessaging.Broker.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: BizTalkMessagingModelHasBroker.Broker
					if (this.Broker != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::BizTalkMessaging.Application.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::BizTalkMessaging.Broker sourceBroker1 = sourceElement as global::BizTalkMessaging.Broker;
			if (sourceBroker1 != null)
			{
				// Create link for path BizTalkMessagingModelHasBroker.Broker
				this.Broker = sourceBroker1;

				return;
			}
				
			global::BizTalkMessaging.Application sourceApplication2 = sourceElement as global::BizTalkMessaging.Application;
			if (sourceApplication2 != null)
			{
				// Create link for path BizTalkMessagingModelHasApplications.Applications
				this.Applications.Add(sourceApplication2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::BizTalkMessaging.Broker sourceBroker1 = sourceElement as global::BizTalkMessaging.Broker;
			if (sourceBroker1 != null)
			{
				// Delete link for path BizTalkMessagingModelHasBroker.Broker
				
				foreach (DslModeling::ElementLink link in global::BizTalkMessaging.BizTalkMessagingModelHasBroker.GetLinks((global::BizTalkMessaging.BizTalkMessagingModel)this, sourceBroker1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BizTalkMessagingModelDomainRoleId, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BrokerDomainRoleId);
				}

				return;
			}
				
			global::BizTalkMessaging.Application sourceApplication2 = sourceElement as global::BizTalkMessaging.Application;
			if (sourceApplication2 != null)
			{
				// Delete link for path BizTalkMessagingModelHasApplications.Applications
				
				foreach (DslModeling::ElementLink link in global::BizTalkMessaging.BizTalkMessagingModelHasApplications.GetLinks((global::BizTalkMessaging.BizTalkMessagingModel)this, sourceApplication2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::BizTalkMessaging.BizTalkMessagingModelHasApplications.BizTalkMessagingModelDomainRoleId, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainClass Application
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.Application.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.Application.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d51113bf-1407-4c1f-b86b-a1572f2e261c")]
	public partial class Application : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Application domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd51113bf, 0x1407, 0x4c1f, 0xb8, 0x6b, 0xa1, 0x57, 0x2f, 0x2e, 0x26, 0x1c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Application(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Application(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa5ee1259, 0xd9a4, 0x4d23, 0x91, 0xdc, 0x15, 0x63, 0x0a, 0x3f, 0x93, 0x82);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for BizTalkMessaging.Application.Name
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.Application/Name.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.Application/Name.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a5ee1259-d9a4-4d23-91dc-15630a3f9382")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Application.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Application, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Application.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Application.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Application element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Application element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BizTalkMessagingModel opposite domain role accessor
		/// <summary>
		/// Gets or sets BizTalkMessagingModel.
		/// </summary>
		public virtual BizTalkMessagingModel BizTalkMessagingModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.ElementDomainRoleId) as BizTalkMessagingModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.BizTalkMessagingModelHasApplications.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region InPort opposite domain role accessor
		/// <summary>
		/// Gets or sets InPort.
		/// Description for BizTalkMessaging.ApplicationSendsToInPort.Application
		/// </summary>
		public virtual InPort InPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.ApplicationSendsToInPort.ApplicationDomainRoleId) as InPort;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.ApplicationSendsToInPort.ApplicationDomainRoleId, value);
			}
		}
		#endregion
		#region OutPorts opposite domain role accessor
		/// <summary>
		/// Gets a list of OutPorts.
		/// Description for BizTalkMessaging.OutPortSendsToApplication.Application
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<OutPort> OutPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<OutPort>(this, global::BizTalkMessaging.OutPortSendsToApplication.ApplicationDomainRoleId);
			}
		}
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainClass OutPort
	/// Description for BizTalkMessaging.OutPort
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.OutPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.OutPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("34613c4f-c5a8-4f81-9a1e-31deafccaf8e")]
	public partial class OutPort : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OutPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x34613c4f, 0xc5a8, 0x4f81, 0x9a, 0x1e, 0x31, 0xde, 0xaf, 0xcc, 0xaf, 0x8e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutPort(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OutPort(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Broker opposite domain role accessor
		/// <summary>
		/// Gets or sets Broker.
		/// Description for BizTalkMessaging.BrokerHasOutPorts.OutPort
		/// </summary>
		public virtual Broker Broker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.BrokerHasOutPorts.OutPortDomainRoleId) as Broker;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.BrokerHasOutPorts.OutPortDomainRoleId, value);
			}
		}
		#endregion
		#region Applications opposite domain role accessor
		/// <summary>
		/// Gets a list of Applications.
		/// Description for BizTalkMessaging.OutPortSendsToApplication.OutPort
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Application> Applications
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Application>(this, global::BizTalkMessaging.OutPortSendsToApplication.OutPortDomainRoleId);
			}
		}
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainClass InPort
	/// Description for BizTalkMessaging.InPort
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.InPort.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.InPort.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bddfa505-4aff-480a-baa8-1158fb0bab99")]
	public partial class InPort : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbddfa505, 0x4aff, 0x480a, 0xba, 0xa8, 0x11, 0x58, 0xfb, 0x0b, 0xab, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InPort(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InPort(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Message domain property code
		
		/// <summary>
		/// Message domain property Id.
		/// </summary>
		public static readonly global::System.Guid MessageDomainPropertyId = new global::System.Guid(0x1ebcc362, 0xa35b, 0x415d, 0xae, 0x91, 0x06, 0x19, 0x2e, 0xdf, 0x99, 0xda);
		
		/// <summary>
		/// Storage for Message
		/// </summary>
		private global::System.String messagePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Message domain property.
		/// Description for BizTalkMessaging.InPort.Message
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.InPort/Message.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.InPort/Message.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1ebcc362-a35b-415d-ae91-06192edf99da")]
		public global::System.String Message
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return messagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MessagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InPort.Message domain property.
		/// </summary>
		internal sealed partial class MessagePropertyHandler : DslModeling::DomainPropertyValueHandler<InPort, global::System.String>
		{
			private MessagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InPort.Message domain property value handler.
			/// </summary>
			public static readonly MessagePropertyHandler Instance = new MessagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InPort.Message domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MessageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InPort element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.messagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InPort element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.messagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Protocol domain property code
		
		/// <summary>
		/// Protocol domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProtocolDomainPropertyId = new global::System.Guid(0x9fa17717, 0x816f, 0x49f0, 0xa0, 0x11, 0x09, 0xb6, 0xd9, 0x7f, 0xb2, 0x96);
		
		/// <summary>
		/// Storage for Protocol
		/// </summary>
		private Protocol protocolPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Protocol domain property.
		/// Description for BizTalkMessaging.InPort.Protocol
		/// </summary>
		[DslDesign::DisplayNameResource("BizTalkMessaging.InPort/Protocol.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("BizTalkMessaging.InPort/Protocol.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9fa17717-816f-49f0-a011-09b6d97fb296")]
		public Protocol Protocol
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return protocolPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProtocolPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InPort.Protocol domain property.
		/// </summary>
		internal sealed partial class ProtocolPropertyHandler : DslModeling::DomainPropertyValueHandler<InPort, Protocol>
		{
			private ProtocolPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InPort.Protocol domain property value handler.
			/// </summary>
			public static readonly ProtocolPropertyHandler Instance = new ProtocolPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InPort.Protocol domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProtocolDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Protocol GetValue(InPort element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.protocolPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InPort element, Protocol newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Protocol oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.protocolPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Broker opposite domain role accessor
		/// <summary>
		/// Gets or sets Broker.
		/// Description for BizTalkMessaging.BrokerHasInPorts.InPort
		/// </summary>
		public virtual Broker Broker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.BrokerHasInPorts.InPortDomainRoleId) as Broker;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.BrokerHasInPorts.InPortDomainRoleId, value);
			}
		}
		#endregion
		#region Application opposite domain role accessor
		/// <summary>
		/// Gets or sets Application.
		/// Description for BizTalkMessaging.ApplicationSendsToInPort.InPort
		/// </summary>
		public virtual Application Application
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.ApplicationSendsToInPort.InPortDomainRoleId) as Application;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.ApplicationSendsToInPort.InPortDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace BizTalkMessaging
{
	/// <summary>
	/// DomainClass Broker
	/// Description for BizTalkMessaging.Broker
	/// </summary>
	[DslDesign::DisplayNameResource("BizTalkMessaging.Broker.DisplayName", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("BizTalkMessaging.Broker.Description", typeof(global::BizTalkMessaging.BizTalkMessagingDomainModel), "BizTalkMessaging.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("12e243b5-d163-4c4e-ba64-2b735359c505")]
	public partial class Broker : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Broker domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12e243b5, 0xd163, 0x4c4e, 0xba, 0x64, 0x2b, 0x73, 0x53, 0x59, 0xc5, 0x05);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Broker(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Broker(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region BizTalkMessagingModel opposite domain role accessor
		/// <summary>
		/// Gets or sets BizTalkMessagingModel.
		/// Description for BizTalkMessaging.BizTalkMessagingModelHasBroker.Broker
		/// </summary>
		public virtual BizTalkMessagingModel BizTalkMessagingModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BrokerDomainRoleId) as BizTalkMessagingModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::BizTalkMessaging.BizTalkMessagingModelHasBroker.BrokerDomainRoleId, value);
			}
		}
		#endregion
		#region OutPorts opposite domain role accessor
		/// <summary>
		/// Gets a list of OutPorts.
		/// Description for BizTalkMessaging.BrokerHasOutPorts.Broker
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<OutPort> OutPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<OutPort>(this, global::BizTalkMessaging.BrokerHasOutPorts.BrokerDomainRoleId);
			}
		}
		#endregion
		#region InPorts opposite domain role accessor
		/// <summary>
		/// Gets a list of InPorts.
		/// Description for BizTalkMessaging.BrokerHasInPorts.Broker
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InPort> InPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InPort>(this, global::BizTalkMessaging.BrokerHasInPorts.BrokerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::BizTalkMessaging.InPort.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::BizTalkMessaging.OutPort.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::BizTalkMessaging.InPort sourceInPort1 = sourceElement as global::BizTalkMessaging.InPort;
			if (sourceInPort1 != null)
			{
				// Create link for path BrokerHasInPorts.InPorts
				this.InPorts.Add(sourceInPort1);

				return;
			}
				
			global::BizTalkMessaging.OutPort sourceOutPort2 = sourceElement as global::BizTalkMessaging.OutPort;
			if (sourceOutPort2 != null)
			{
				// Create link for path BrokerHasOutPorts.OutPorts
				this.OutPorts.Add(sourceOutPort2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::BizTalkMessaging.InPort sourceInPort1 = sourceElement as global::BizTalkMessaging.InPort;
			if (sourceInPort1 != null)
			{
				// Delete link for path BrokerHasInPorts.InPorts
				
				foreach (DslModeling::ElementLink link in global::BizTalkMessaging.BrokerHasInPorts.GetLinks((global::BizTalkMessaging.Broker)this, sourceInPort1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::BizTalkMessaging.BrokerHasInPorts.BrokerDomainRoleId, global::BizTalkMessaging.BrokerHasInPorts.InPortDomainRoleId);
				}

				return;
			}
				
			global::BizTalkMessaging.OutPort sourceOutPort2 = sourceElement as global::BizTalkMessaging.OutPort;
			if (sourceOutPort2 != null)
			{
				// Delete link for path BrokerHasOutPorts.OutPorts
				
				foreach (DslModeling::ElementLink link in global::BizTalkMessaging.BrokerHasOutPorts.GetLinks((global::BizTalkMessaging.Broker)this, sourceOutPort2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::BizTalkMessaging.BrokerHasOutPorts.BrokerDomainRoleId, global::BizTalkMessaging.BrokerHasOutPorts.OutPortDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
